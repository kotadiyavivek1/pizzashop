@using pizzashop_Repository.ViewModel
@model TableSectionDto
@{
    Model.SectionDto = Model.SectionDto ?? new SectionDto();
    Model.TableDto = Model.TableDto ?? new TableDto();
    Model.Sections = Model.Sections ?? new List<SectionDto>();
    var id = @Model.Sections.FirstOrDefault();
    int sectionId = id != null ? id.Id : 0;
}

<head>
    <link rel="stylesheet" href="~/css/MenuPage.css" asp-append-version="true" />
    <style>
        @* li a {
            text-decoration: none;
            color: black;
        }

        .section-item {
            cursor: pointer;
            padding: 5px;
            border-bottom: 1px solid #ddd;
        }

        .section-item:hover,
        .section-item.selected {
            background-color: #f0f0f0;
        } *@



        .action-buttons {
            display: none !important;
        }

        .category-item.selected .action-buttons {
            display: inline-block !important;
        }
    </style>
</head>

<div class="content container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h3 class="mb-4 fw-bold" style="color: #0b72b5;">Sections/Tables</h3>
        </div>
    </div>

    <div class="row">

        <div class="col-md-3 m-0 p-2 " style="background-color: white">
            <div class="category-section border-end">
                <div class="d-flex  justify-content-between align-items-center  pb-2 mb-3 px-2">
                    <h4 class="mb-0 fw-bold" style="color:#0b72b5">Section</h4>
                    <button class="btn btn-sm" data-bs-toggle="modal" data-bs-target="#addSectionModal">
                        <i class="bi bi-plus"></i>
                    </button>
                </div>

                <div class="modal fade" id="addSectionModal" tabindex="-1" aria-labelledby="addSectionModalLabel"
                    aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="addSectionModalLabel">Add Section</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Close"></button>
                            </div>
                            <form method="post" id="addSectionForm">
                                <div class="modal-body">

                                    <div class="form-floating">
                                        <input type="text" class="form-control rounded-0" id="SectionName"
                                            name="SectionDto.SectionName">
                                        <label for="SectionName">Name</label>
                                        <span class="text-danger small" id="SectionNameError"></span>
                                    </div>
                                    <div class="form-floating mt-3">
                                        <input type="text" class="form-control rounded-0" id="Description"
                                            asp-for="@Model.SectionDto.Description">
                                        <label for="Description">Description</label>
                                    </div>
                                </div>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-primary">Save</button>
                                    <button type="button" class="btn btn-secondary"
                                        data-bs-dismiss="modal">Cancel</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <ul class="p-2 overflow-y-auto category-list" style="max-height: 400px; ">
                    @if (Model?.Sections?.Any() == true)
                    {
                        @foreach (var item in Model.Sections)
                        {
                            <li class="d-flex justify-content-between align-items-center category-item py-2 px-2 rounded-2"
                                data-sectionId="@item.Id">
                                <a class="getItems text-decoration-none flex-grow-1 category-name"
                                    data-section-id="@item.Id">@item.SectionName</a>
                                <div class="action-buttons d-flex gap-2">
                                    <button class="btn btn-sm p-0 border-0 bg-transparent EditSectionModal"
                                        data-section-id="@item.Id">
                                        <i class="bi bi-pencil" data-bs-toggle="modal" data-bs-target="#EditSectionModal"></i>
                                    </button>
                                    <button class="btn btn-sm p-0 border-0 bg-transparent delete-btn" data-section-id="@item.Id"
                                        data-bs-target="#deleteSectionModal" data-bs-toggle="modal">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li>No sections available</li>
                    }
                </ul>
            </div>
        </div>

        <!-- Content Section -->
        <div class="col-md-9 col-md-9 m-0 p-2 bg-white" id="itemsTable" style="min-height: 600px; " id="itemsTable">
            @if (Model?.FilterPaginationDto != null)
            {
                @await Html.PartialAsync("_TablePartial", Model.FilterPaginationDto)
            }
            else
            {
                <p>No tables found for the selected section.</p>
            }
        </div>
    </div>
    <div class="modal fade" id="EditSectionModal" tabindex="-1" aria-labelledby="EditSectionModalLabel"
        aria-hidden="true">
        @await Html.PartialAsync("_editSectionPartial", @Model?.SectionDto)
    </div>
    <div class="modal fade" id="deleteSectionModal" tabindex="-1" aria-labelledby="deleteSectionModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteUserModalLabel">Confirm Delete</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to delete this user?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="AddNewTable" tabindex="-1" aria-labelledby="AddNewTableLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="AddNewTableLabel">Add Table</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addNewTableForm" method="post" novalidate>
                        <!-- Hidden Input for Table Id -->
                        <input type="number" asp-for="@Model.TableDto.Id" hidden>

                        <!-- Two columns on medium screens and up, one column on small -->
                        <div class="row g-3">
                            <!-- Table Name Field -->
                            <div class="col-md-6">
                                <div class="form-floating mb-1">
                                    <input asp-for="@Model.TableDto.TableName" type="text" class="form-control"
                                        id="TableName" placeholder="Name" />
                                    <label for="TableName">Name</label>
                                    <span class="error-message text-danger small"></span>
                                </div>

                            </div>

                            <!-- Section Field -->
                            <div class="col-md-6">
                                <div class="form-floating mb-1">
                                    <select asp-for="@Model.TableDto.SectionId" class="form-select" id="SectionId"
                                        name="TableDto.SectionId">
                                        <option selected disabled hidden>Select a Section</option>
                                        @foreach (var item in Model.Sections)
                                        {
                                            <option value="@item.Id">@item.SectionName</option>
                                        }
                                    </select>
                                    <span class="error-message text-danger small"></span>
                                </div>
                            </div>

                            <!-- Capacity Field -->
                            <div class="col-md-6">
                                <div class="form-floating mb-1">
                                    <input asp-for="@Model.TableDto.Capacity" type="number" class="form-control"
                                        id="Capacity" placeholder="Capacity" />
                                    <label for="Capacity">Capacity</label>
                                    <span class="error-message text-danger small">abcnadscdnSDN</span>
                                </div>

                            </div>

                            <!-- Availability Status Field -->
                            <!-- Status Field -->
                            <div class="col-md-6">
                                <div class="form-floating mb-1">
                                    <select asp-for="@Model.TableDto.IaAvailable" class="form-select" id="IsAvailable"
                                        name="TableDto.IaAvailable">
                                        <option selected disabled hidden value="">Select a Status</option>
                                        <option value="true">Available</option>
                                        <option value="false">Occupied</option>
                                    </select>
                                    <label for="IsAvailable">Status</label>
                                </div>
                                <span class="error-message text-danger small"></span>
                            </div>

                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="submitTableForm">Save</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="EditTable" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        @await Html.PartialAsync("_editTablePartial", @Model)
    </div>

</div>


<script src="~/js/jquery-3.6.0.js" asp-append-version="true"></script>

<script>


    $(document).ready(function () {
        $('#AddNewTable').on('hidden.bs.modal', function () {
            $('#addNewTableForm')[0].reset();
            $('#addNewTableForm .error-message').text("");
        });


        $(document).on("click", "#addTable", function () {
            const modalElement = document.getElementById('AddNewTable');
            const modal = new bootstrap.Modal(modalElement);
            modal.show();
        });

        $(".category-item").click(function () {
            $(".category-item").removeClass("selected active");
            $(".action-buttons").hide(); // hide all first

            $(this).addClass("selected active");
            $(this).find(".action-buttons").show(); // show only for clicked one
        });



        $("#addSectionForm").on("submit", function (e) {
            e.preventDefault();


            var sectionName = $("#SectionName").val().trim();
            var isValid = true;
            $("#SectionNameError").text("");


            if (sectionName === "") {
                $("#SectionNameError").text("Name is required");
                isValid = false;
            }


            if (!isValid) return;

            var formData = $(this).serialize();


            $.ajax({
                url: "/Section/AddSection",
                method: "POST",
                data: formData,
                success: function (response) {
                    if (response.success) {
                        $('#addSectionModal').modal('hide');
                        setTimeout(() => {
                            location.reload();
                        }, 300);

                    } else {
                        toaster.error(response.message);
                    }
                },
                error: function (response) {
                    toaster.error("Error saving section.");
                }
            });



            $("#SectionName").on("click", function () {
                $("#SectionNameError").text("");
            });
        });


        $(document).on("click", "#SectionName", function () {
            $("#SectionNameError").text("");
        });

        let currentSectionId = $(".getItems").first().data("section-id");
        let currentPage = 1;
        let currentPageSize = 3;
        let currentSearch = "";
        let debounceTimer;
        loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);

        $(document).on("click", ".getItems", function (e) {
            e.preventDefault();
            currentSectionId = $(this).data("section-id");
            currentPage = 1;

            $(".category-item").removeClass("selected active");
            $(this).closest(".category-item").addClass("selected active");

            loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
        });

        $(document).on("change", "#pageSize", function () {
            currentPageSize = $(this).val();
            currentPage = 1;
            loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
        });

        $(document).on("click", "#nextPage", function (e) {
            e.preventDefault();
            if (!$(this).closest("li").hasClass("disabled")) {
                currentPage++;
                loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
            }
        });

        $(document).on("click", "#prevPage", function (e) {
            e.preventDefault();
            if (!$(this).closest("li").hasClass("disabled")) {
                currentPage--;
                loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
            }
        });


        $(document).on("keyup", "#searchBox", function () {
            clearTimeout(debounceTimer);
            currentSearch = $(this).val();
            debounceTimer = setTimeout(function () {
                currentPage = 1;
                loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
            }, 300);
        });


        function loadTables(sectionId, page, size, search) {
            $.ajax({
                url: "/Section/FilteredTablesBySection",
                type: "GET",
                data: {
                    sectionId: sectionId,
                    PageNumber: page,
                    PageSize: size,
                    searchString: search
                },
                success: function (response) {
                    $("#itemsTable").html(response);
                    $("#searchInput").val(search);
                },
                error: function () {
                    alert("failed to load tables");
                }
            });
        }


        let selectedTableId = null;

        $(document).on("click", ".delete-table-btn", function () {
            selectedTableId = $(this).data("id");
        });
        $(document).on("click", "#confirmDeleteTable", function () {
            $.ajax({
                url: '/Section/DeleteTable',
                type: 'POST',
                data: { id: selectedTableId },
                success: function (data) {
                    $('#deleteTableModal').modal('hide');
                    loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
                }
            });
        });

        // Add table button click handler - this opens the modal

        // Initialize modal instance once
        $(document).on("submit", "#addNewTableForm", function (e) {
            e.preventDefault();
            validateAndSubmitForm();
        });

        $(document).on("click", "#submitTableForm", function (e) {
            e.preventDefault();
            validateAndSubmitForm();
        });

        $(document).on("keyup", "#TableName, #Capacity, #IsAvailable", function () {
            $(this).siblings(".error-message").text("");
        });


        $(document).on("change", "#SectionId", function () {
            $(this).siblings(".error-message").text("");
        });

        function validateAndSubmitForm() {
            let isValid = true;
            $(".error-message").text("");


            let tableName = $("#TableName").val().trim();
            let sectionId = $("#SectionId").val();
            let capacity = parseInt($("#Capacity").val());
            let isAvailable = $("#IsAvailable").val();



            // Table name validation
            if (tableName === "") {
                isValid = false;

                $("#TableName").siblings(".error-message").text("Table name is required.");
            }

            // Section validation
            if (!sectionId) {
                isValid = false;

                $("#SectionId").siblings(".error-message").text("Please select a section.");
            }

            // Capacity validation
            if (isNaN(capacity)) {
                isValid = false;

                $("#Capacity").siblings(".error-message").text("Capacity is required.");
            } else if (capacity <= 0) {
                isValid = false;

                $("#Capacity").siblings(".error-message").text("Capacity must be greater than 0.");
            }

            // Status validation
            if (!isAvailable) {
                isValid = false;

                $("#IsAvailable").siblings(".error-message").text("Please select a status.");
            }

            // Exit if validation failed
            if (!isValid) {
                return;
            }

            // If valid, proceed with AJAX
            let formData = $("#addNewTableForm").serialize();

            $.ajax({
                url: '/Section/addTable',
                type: 'POST',
                data: formData,
                success: function (response) {
                    if (response.success) {
                        const modalElement = document.getElementById('AddNewTable');
                        const modal = bootstrap.Modal.getInstance(modalElement);
                        modal.hide();

                        toastr.success(response.message);

                        setTimeout(() => {
                            loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
                        }, 1500);
                    } else if (response.errors) {
                        Object.keys(response.errors).forEach(key => {
                            toastr.error(key);
                        });
                    }
                },
                error: function (xhr) {
                    toastr.error("An error occurred: " + xhr.statusText);
                }
            });
        }





        $(document).on("click", ".EditTable", function () {
            let tableId = $(this).data("tableid");
            $.ajax({
                url: '/Section/GetTableById',
                type: 'GET',
                data: { id: tableId },
                success: function (data) {
                    $('#EditTable').html(data);
                    $('#EditTable').modal('show');
                }
            });
        });


        $("#selectAll").click(function () {
            $(".checkboxTable").prop('checked', $(this).prop('checked'));
        });


        $("#trashButton").click(function () {
            let tableIds = [];
            $(".checkboxTable:checked").each(function () {
                tableIds.push($(this).data("id"));
            });

            console.log(tableIds);
            if (tableIds.length === 0) {
                alert("Please select at least one table to delete");
                return;
            }

            $("#confirmDeleteTables").click(function () {
                $.ajax({
                    url: '/Section/DeleteTables',
                    type: 'POST',
                    data: { tableIds: tableIds },
                    success: function (data) {
                        console.log(data);
                        $('#trashTables').modal('hide');
                        loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
                    }
                });
            });
        });


        $(document).on("submit", "#EditTableForm", function (e) {
            e.preventDefault();
            if (!validateEditTableForm()) {
                return; 
            }

            let formdata = $(this).serialize();

            console.log("Serialized Data:", formdata);

            $.ajax({
                type: "POST",
                url: "/Section/EditTable",
                data: formdata,
                success: function (response) {
                    console.log("Server Response:", response);
                    if (response.success) {
                        $("#EditTable").modal("hide");
                        loadTables(currentSectionId, currentPage, currentPageSize, currentSearch);
                    } else {
                        alert("Failed to update table. Please try again.");
                    }
                },
                error: function (xhr) {
                    console.error("Error:", xhr.responseText);
                    alert("An error occurred while updating the table.");
                }
            });
        });

        function validateEditTableForm() {
            debugger
            let isValid = true;

            // Clear previous error messages
            $("#EditTableForm .error-message").text("");

            // Name validation
            const name = $("#EditTableName").val().trim();
            if (name === "") {
                $("#EditTableName").siblings(".error-message").text("Table name is required.");
                isValid = false;
            }

            // Section validation
            const section = $("#EditSectionId").val();
            if (!section) {
                $("#EditSectionId").siblings(".error-message").text("Please select a section.");
                isValid = false;
            }

            // Capacity validation
            const capacity = $("#EditCapacity").val().trim();
            if (capacity === "" || parseInt(capacity) <= 0) {
                $("#EditCapacity").siblings(".error-message").text("Capacity must be a number greater than 0.");
                isValid = false;
            }

            // Status validation
            const status = $("#EditIsAvailable").val();
            if (!status) {
                $("#EditIsAvailable").siblings(".error-message").text("Please select availability status.");
                isValid = false;
            }
            return isValid;
        }


        $(document).on("click", ".delete-btn", function () {
            let secId = $(this).data("section-id");
            $("#confirmDeleteBtn").off("click").on("click", function () {
                $.ajax({
                    url: "/Section/DeleteSection",
                    type: "Post",
                    data: { sectionId: secId },
                    success: function (response) {
                        location.reload();
                    },
                    error: function () {
                        alert("failed to delete section");
                    }
                });
            });
        });


        $(document).on("submit", "#EditSectionForm", function (e) {
            e.preventDefault();
            alert("editsection");
            e.preventDefault();

            let sectionName = $("#EditSectionName").val().trim();
            let isValid = true;
            $("#EditSectionNameError").text("");


            if (sectionName === "") {
                $("#EditSectionNameError").text("Name is required");
                isValid = false;
            }

            $("#EditSectionName").on("keyup", function () {
                $("#EditSectionNameError").text("");
            });

            if (!isValid) return;


            let formdata = $(this).serialize();

            $.ajax({
                url: "/Section/EditSection",
                type: "POST",
                data: formdata,
                success: function (response) {
                    $("#EditSectionModal").modal("hide");
                    toastr.success(response.message);
                    setTimeout(function () {
                        location.reload();
                    }, 1500);
                },

                error: function (response) {
                    toastr.error(response.message);
                }
            });
        });


        $(document).on("click", ".EditSectionModal", function () {
            let secId = $(this).data("section-id");

            $.ajax({
                url: "/Section/GetSectionById",
                type: "Get",
                data: { sectionId: secId },
                success: function (response) {
                    $("#EditSectionModal").html(response);
                    $("#EditSectionModal").modal("show");
                },
                error: function () {
                    alert("failed to load section");
                }
            });
        });


        $("#cloud").click(function () {
            $("#InputFile").click();
        });
        $("#InputFile").change(function () {
            if (this.files.length > 0) {
                $("#Label").text(this.files[0].name);
            } else {
                $("#Label").text("Browse Files");
            }
        });
    });
</script>